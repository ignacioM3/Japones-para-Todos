---
interface Section {
  id: string;
  label: string;
  title: string;
}

const { sections } = Astro.props;
---

<aside class="hidden md:flex justify-end h-screen w-[30%] sticky top-0 overflow-auto">
  <div class="flex flex-col items-end max-w-[250px] w-full mt-40">
    {sections.map((section: Section) => (
      <a
        href={`#${section.id}`}
        class="text-start p-2 hover:bg-blue-400 w-full rounded-sm transition-colors font-mono text-gray-500 font-bold hover:text-white"
      >
        {section.label} <span>{section.title}</span>
      </a>
    ))}
  </div>
</aside>

<aside class="bg-white text-gray-500 font-mono font-bold fixed md:hidden mt-21 z-[101] w-full flex justify-center items-center shadow-md rounded-b-md">
  <select id="tema" class="bg-white text-center w-full p-2.5">
    <option value="">Selecciona una secci√≥n</option>
    {sections.map((section: Section) => (
      <option value={`#${section.id}`}>
        {section.label} {section.title}
      </option>
    ))}
  </select>
</aside>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const select = document.getElementById('tema');

    if (select) {
      select.value = window.location.hash;

      window.addEventListener('hashchange', () => {
        select.value = window.location.hash;
      });

      select.addEventListener('focus', () => {
        select.value = '';
      });

      select.addEventListener('blur', () => {
        select.value = window.location.hash;
      });

      select.addEventListener('change', (e) => {
        const value = e.target.value;
        if (value) {
          const section = document.querySelector(value);
          if (section) {
            section.scrollIntoView({ behavior: 'smooth' });
            window.location.hash = value;
          }
        }
      });
    }
  });
</script>
